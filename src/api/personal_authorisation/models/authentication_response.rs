/*
 * Authorization API
 *
 * Nordea Authorization API v5
 *
 * The version of the OpenAPI document: 5.0
 * Contact: support@nordeaopenbanking.com
 * Generated by: https://openapi-generator.tech
 */
use serde_derive::{Deserialize, Serialize};


#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct AuthenticationResponse {
    /// Session Id UUID used for polling the authentication status.
    #[serde(rename = "session_id", skip_serializing_if = "Option::is_none")]
    pub session_id: Option<String>,
    /// Sweden and Denmark only: An auto start token used to either automatically start the native mobile authentication app on PSU device or display a QR code for scanning.
    #[serde(rename = "auto_start_token", skip_serializing_if = "Option::is_none")]
    pub auto_start_token: Option<String>,
    /// Authentication session status.
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<Status>,
    /// Suggestion how often the polling for the authentication status should be done.
    #[serde(rename = "verify_after", skip_serializing_if = "Option::is_none")]
    pub verify_after: Option<i64>,
    /// Authorization code
    #[serde(rename = "code", skip_serializing_if = "Option::is_none")]
    pub code: Option<String>,
}


#[allow(dead_code)]
impl AuthenticationResponse {
    pub fn new() -> AuthenticationResponse {
        AuthenticationResponse {
            session_id: None,
            auto_start_token: None,
            status: None,
            verify_after: None,
            code: None,
        }
    }
}


/// Authentication session status.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "assignment_pending")]
    AssignmentPending,
    #[serde(rename = "confirmation_pending")]
    ConfirmationPending,
    #[serde(rename = "completed")]
    Completed,
    #[serde(rename = "cancelled")]
    Cancelled,
}


impl Default for Status {
    fn default() -> Status {
        Self::AssignmentPending
    }
}
