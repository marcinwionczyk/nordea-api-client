/*
 * Authorization API
 *
 * Nordea Authorization API v5
 *
 * The version of the OpenAPI document: 5.0
 * Contact: support@nordeaopenbanking.com
 * Generated by: https://openapi-generator.tech
 */

use serde_derive::{Deserialize, Serialize};

/// AuthRequest : Request for authorization
#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct AuthRequest {
    /// Optional list of payment accounts for which the PSU has agreed access with the TPP. If not provided, PSU will select payment account(s) in the Nordea UI. If skip_account_selection is set to True, Then account_list must be provided. Special cases:   * passing 'ALL' results in the PSU agreeing access to all of their Nordea payment accounts.   * passing 'ALL_WITH_CARDS' results in the PSU agreeing access to all of their Nordea payment accounts AND cards.
    #[serde(rename = "account_list", skip_serializing_if = "Option::is_none")]
    pub account_list: Option<Vec<String>>,
    /// Parameter with possible values: BANKID_NO (NO only: BankID Norway), BANKIDM_NO (NO only: Mobile BankID Norway), MTA_NO (NO only: Nordea ID NO - Online), BANKID_SE (SE only: BankIdSe), CARD_RDR (SE only: Card Reader e-code), MTA (FI only: Nordea ID FI - Online), MTA_OFF (FI only: Nordea ID FI - Offline), CCALC (FI only: Code Calculator), QR_RDR (SE only: QR reader), MITID (DK only: MitID), MTA_QR (FI only: Nordea ID QR code), MTA_DK (DK only: Nordea ID DK), QRT_DK (DK only: Nordea ID device DK)
    #[serde(
        rename = "authentication_method",
        skip_serializing_if = "Option::is_none"
    )]
    pub authentication_method: Option<AuthenticationMethod>,
    /// Country is a mandatory parameter with possible values FI, DK, NO or SE
    #[serde(rename = "country")]
    pub country: Country,
    /// Duration of access authorization in minutes. range: 1 to 259200 minutes (180 days)
    #[serde(rename = "duration")]
    pub duration: i32,
    /// Language of message that will be displayed to client of bankId mobile app, ISO639-1 and 639-2
    #[serde(rename = "language", skip_serializing_if = "Option::is_none")]
    pub language: Option<Language>,
    /// Maximum transaction history in months. Optional if ACCOUNTS_TRANSACTIONS scope is requested. Default=2 months. range: 1 to 18 months
    #[serde(rename = "max_tx_history", skip_serializing_if = "Option::is_none")]
    pub max_tx_history: Option<i32>,
    /// Redirect URI you used when this application was registered with Nordea.
    #[serde(rename = "redirect_uri")]
    pub redirect_uri: String,
    /// Scope list. Note: ACCOUNTS_BASIC must be present at a minimum, when requesting ACCOUNTS_* scopes
    #[serde(rename = "scope")]
    pub scope: Vec<crate::api::personal_authorisation::models::Scope>,
    /// If set to true, enables skipping of account selection step provided by Nordea. If set to true, then cards data cannot be accessed. If not set, value defaults to false and account selection step is provided to the PSU.
    #[serde(
        rename = "skip_account_selection",
        skip_serializing_if = "Option::is_none"
    )]
    pub skip_account_selection: Option<bool>,
    /// The OAuth2 state parameter
    #[serde(rename = "state")]
    pub state: String,
}


#[allow(dead_code)]
impl AuthRequest {
    /// Request for authorization
    pub fn new(
        country: Country,
        duration: i32,
        redirect_uri: String,
        scope: Vec<crate::api::personal_authorisation::models::Scope>,
        state: String,
    ) -> AuthRequest {
        AuthRequest {
            account_list: None,
            authentication_method: None,
            country,
            duration,
            language: None,
            max_tx_history: None,
            redirect_uri,
            scope,
            skip_account_selection: None,
            state,
        }
    }
}

/// Parameter with possible values: BANKID_NO (NO only: BankID Norway), BANKIDM_NO (NO only: Mobile BankID Norway), MTA_NO (NO only: Nordea ID NO - Online), BANKID_SE (SE only: BankIdSe), CARD_RDR (SE only: Card Reader e-code), MTA (FI only: Nordea ID FI - Online), MTA_OFF (FI only: Nordea ID FI - Offline), CCALC (FI only: Code Calculator), QR_RDR (SE only: QR reader), MITID (DK only: MitID), MTA_QR (FI only: Nordea ID QR code), MTA_DK (DK only: Nordea ID DK), QRT_DK (DK only: Nordea ID device DK)
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum AuthenticationMethod {
    #[serde(rename = "BANKID_NO")]
    BankidNo,
    #[serde(rename = "BANKIDM_NO")]
    BankidmNo,
    #[serde(rename = "MTA_NO")]
    MtaNo,
    #[serde(rename = "BANKID_SE")]
    BankidSe,
    #[serde(rename = "CARD_RDR")]
    CardRdr,
    #[serde(rename = "MTA")]
    Mta,
    #[serde(rename = "MTA_OFF")]
    MtaOff,
    #[serde(rename = "CCALC")]
    Ccalc,
    #[serde(rename = "QR_RDR")]
    QrRdr,
    #[serde(rename = "MITID")]
    Mitid,
    #[serde(rename = "MTA_QR")]
    MtaQr,
    #[serde(rename = "MTA_DK")]
    MtaDk,
    #[serde(rename = "QRT_DK")]
    QrtDk,
}

impl Default for AuthenticationMethod {
    fn default() -> AuthenticationMethod {
        Self::BankidNo
    }
}

/// Country is a mandatory parameter with possible values FI, DK, NO or SE
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Country {
    #[serde(rename = "FI")]
    Fi,
    #[serde(rename = "DK")]
    Dk,
    #[serde(rename = "NO")]
    No,
    #[serde(rename = "SE")]
    Se,
}

impl Default for Country {
    fn default() -> Country {
        Self::Fi
    }
}

/// Language of message that will be displayed to client of bankId mobile app, ISO639-1 and 639-2
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Language {
    #[serde(rename = "fi")]
    Fi,
    #[serde(rename = "da")]
    Da,
    #[serde(rename = "sv")]
    Sv,
    #[serde(rename = "en")]
    En,
    #[serde(rename = "no")]
    No,
}

impl Default for Language {
    fn default() -> Language {
        Self::Fi
    }
}
