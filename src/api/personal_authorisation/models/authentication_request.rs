/*
 * Authorization API
 *
 * Nordea Authorization API v5
 *
 * The version of the OpenAPI document: 5.0
 * Contact: support@nordeaopenbanking.com
 * Generated by: https://openapi-generator.tech
 */

use serde_derive::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct AuthenticationRequest {
    /// Parameter with possible values: BANKID_SE (BankID SE), MTA (Nordea ID for Finland), CCALC (Code Calculator for Finland), MTA_NO (Nordea ID for Norway), MTA_DK (DK only: Nordea ID DK). BANKID_SE when country = SE MTA_NO when country = NO MTA or CCALC when country = FI MTA_DK when country = DK
    #[serde(rename = "authentication_method")]
    pub authentication_method: AuthenticationMethod,
    /// Country is a mandatory parameter with 'SE', 'FI', 'NO' and 'DK' as possible values.
    #[serde(rename = "country")]
    pub country: Country,
    /// 9 characters If authentication_method = CCALC then otp_code must be provided in this field.
    #[serde(rename = "otp_code", skip_serializing_if = "Option::is_none")]
    pub otp_code: Option<String>,
    /// Sweden: Personnummer given by the customer. Norway: Social Security Number given by the customer. Finland: User ID given by the customer. Denmark: User ID given by the customer. Note: If country = NO, Then customer Social Security Number must be provided in this field. If country = FI, Then customer User ID must be provided in this field.
    #[serde(rename = "psu_id", skip_serializing_if = "Option::is_none")]
    pub psu_id: Option<String>,
    /// OAuth2 response type parameter.  The value MUST be set to \"code\" for requesting an authorization code.
    #[serde(rename = "response_type")]
    pub response_type: ResponseType,
    /// Sweden only. If set to 'true', then customer primary agreement is automatically authorized. If set to 'false', then all available customer agreements are returned in order to enable agreement selection. Default if not set = true.
    #[serde(
        rename = "use_primary_agreement",
        skip_serializing_if = "Option::is_none"
    )]
    pub use_primary_agreement: Option<bool>,
}


#[allow(dead_code)]
impl AuthenticationRequest {
    pub fn new(
        authentication_method: AuthenticationMethod,
        country: Country,
        response_type: ResponseType,
    ) -> AuthenticationRequest {
        AuthenticationRequest {
            authentication_method,
            country,
            otp_code: None,
            psu_id: None,
            response_type,
            use_primary_agreement: None,
        }
    }
}


/// Parameter with possible values: BANKID_SE (BankID SE), MTA (Nordea ID for Finland), CCALC (Code Calculator for Finland), MTA_NO (Nordea ID for Norway), MTA_DK (DK only: Nordea ID DK). BANKID_SE when country = SE MTA_NO when country = NO MTA or CCALC when country = FI MTA_DK when country = DK
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum AuthenticationMethod {
    #[serde(rename = "BANKID_SE")]
    BankidSe,
    #[serde(rename = "MTA_NO")]
    MtaNo,
    #[serde(rename = "MTA")]
    Mta,
    #[serde(rename = "MTA_DK")]
    MtaDk,
    #[serde(rename = "CCALC")]
    Ccalc,
}


impl Default for AuthenticationMethod {
    fn default() -> AuthenticationMethod {
        Self::BankidSe
    }
}


/// Country is a mandatory parameter with 'SE', 'FI', 'NO' and 'DK' as possible values.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Country {
    #[serde(rename = "SE")]
    Se,
    #[serde(rename = "NO")]
    No,
    #[serde(rename = "FI")]
    Fi,
    #[serde(rename = "DK")]
    Dk,
}


impl Default for Country {
    fn default() -> Country {
        Self::Se
    }
}


/// OAuth2 response type parameter.  The value MUST be set to \"code\" for requesting an authorization code.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ResponseType {
    #[serde(rename = "code")]
    Code,
}

impl Default for ResponseType {
    fn default() -> ResponseType {
        Self::Code
    }
}
