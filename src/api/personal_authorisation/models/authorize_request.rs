/*
 * Authorization API
 *
 * Nordea Authorization API v5
 *
 * The version of the OpenAPI document: 5.0
 * Contact: support@nordeaopenbanking.com
 * Generated by: https://openapi-generator.tech
 */
use serde_derive::{Deserialize, Serialize};


#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct AuthorizeRequest {
    /// List of payment accounts for which the PSU has agreed to provide access to the TPP.  Special cases:   * passing 'ALL' results in the PSU agreeing access to all of their Nordea payment accounts.   * passing 'ALL_WITH_CARDS' results in the PSU agreeing access to all of their Nordea payment accounts AND cards.
    #[serde(rename = "account_list")]
    pub account_list: Vec<String>,
    /// Authorization code of authenticated PSU.
    #[serde(rename = "code")]
    pub code: String,
    /// Duration of access authorization in minutes. range: 1 to 259200 minutes (180 days)
    #[serde(rename = "duration")]
    pub duration: i32,
    /// Maximum transaction history in months. Optional if ACCOUNTS_TRANSACTIONS scope is requested. Default=2 months. Range: 1 to 18 months
    #[serde(rename = "max_tx_history", skip_serializing_if = "Option::is_none")]
    pub max_tx_history: Option<i64>,
    /// Response type, for decoupled authorization this should be 'nordea_token'
    #[serde(rename = "response_type")]
    pub response_type: String,
    /// Scope of the requested access with the possible values listed below: AIS scopes: ACCOUNTS_BASIC (note: Must always be present at a minimum, when requesting ACCOUNTS_* scopes) ACCOUNTS_BALANCES ACCOUNTS_DETAILS ACCOUNTS_TRANSACTIONS PIS scope: PAYMENTS_MULTIPLE  Cards scopes: CARDS_INFORMATION CARDS_TRANSACTIONS
    #[serde(rename = "scope")]
    pub scope: Vec<crate::api::personal_authorisation::models::Scope>,
}


#[allow(dead_code)]
impl AuthorizeRequest {
    pub fn new(
        account_list: Vec<String>,
        code: String,
        duration: i32,
        response_type: String,
        scope: Vec<crate::api::personal_authorisation::models::Scope>,
    ) -> AuthorizeRequest {
        AuthorizeRequest {
            account_list,
            code,
            duration,
            max_tx_history: None,
            response_type,
            scope,
        }
    }
}
