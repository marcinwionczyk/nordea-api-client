/*
 * Authorization API
 *
 * Nordea Authorization API v5
 *
 * The version of the OpenAPI document: 5.0
 * Contact: support@nordeaopenbanking.com
 * Generated by: https://openapi-generator.tech
 */
use reqwest;

use super::Error;
use crate::api::configuration;
use crate::api::personal_authorisation::endpoints::ResponseContent;
use serde_derive::{Deserialize, Serialize};


/// struct for typed errors of method [`revoke_using_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum RevokeUsingPostError {
    Status400(crate::api::personal_authorisation::models::ErrorResponse),
    Status401(crate::api::personal_authorisation::models::ErrorResponse),
    Status403(crate::api::personal_authorisation::models::ErrorResponse),
    Status404(crate::api::personal_authorisation::models::ErrorResponse),
    UnknownValue(serde_json::Value),
}

#[allow(dead_code)]

/// See https://tools.ietf.org/html/rfc7009#section-2.1
pub async fn revoke_using_post(
    configuration: &configuration::Configuration,
    digest: &str,
    signature: &str,
    x_ibm_client_id: &str,
    x_ibm_client_secret: &str,
    x_nordea_originating_date: &str,
    x_nordea_originating_host: &str,
    token: crate::api::personal_authorisation::models::TokenRevocationRequest,
    x_nordea_originating_user_agent: Option<&str>,
    x_nordea_originating_user_ip: Option<&str>,
) -> Result<String, Error<RevokeUsingPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/v5/authorize/token/revoke",
        local_var_configuration.base_path
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.header("Digest", digest.to_string());
    local_var_req_builder = local_var_req_builder.header("Signature", signature.to_string());
    local_var_req_builder =
        local_var_req_builder.header("X-IBM-Client-Id", x_ibm_client_id.to_string());
    local_var_req_builder =
        local_var_req_builder.header("X-IBM-Client-Secret", x_ibm_client_secret.to_string());
    local_var_req_builder = local_var_req_builder.header(
        "X-Nordea-Originating-Date",
        x_nordea_originating_date.to_string(),
    );
    local_var_req_builder = local_var_req_builder.header(
        "X-Nordea-Originating-Host",
        x_nordea_originating_host.to_string(),
    );
    if let Some(local_var_param_value) = x_nordea_originating_user_agent {
        local_var_req_builder = local_var_req_builder.header(
            "X-Nordea-Originating-User-Agent",
            local_var_param_value.to_string(),
        );
    }
    if let Some(local_var_param_value) = x_nordea_originating_user_ip {
        local_var_req_builder = local_var_req_builder.header(
            "X-Nordea-Originating-User-Ip",
            local_var_param_value.to_string(),
        );
    }
    local_var_req_builder = local_var_req_builder.json(&token);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<RevokeUsingPostError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}
